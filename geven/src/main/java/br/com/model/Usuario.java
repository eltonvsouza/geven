package br.com.model;

// Generated 08/03/2012 15:36:20 by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;

/**
 * Usuario generated by hbm2java
 */
@Entity
@Table(name = "usuario", catalog = "geven", uniqueConstraints = @UniqueConstraint(columnNames = "usuario"))
public class Usuario implements java.io.Serializable {

	private Integer codigo;
	private Unidade unidade;
	private String usuario;
	private String senha;
	private String nome;
	private String email;
	private String grupo;
//	private datahoracadastro;

	public Usuario() {
	}

	public Usuario(Unidade unidade, String usuario, String senha, String nome, Date datahoracadastro) {
		this.unidade = unidade;
		this.usuario = usuario;
		this.senha = senha;
		this.nome = nome;
//		this.datahoracadastro = datahoracadastro; 
	}

	public Usuario(Unidade unidade, String usuario, String senha, String nome,
			String email, String grupo, Date datahoracadastro) {
		this.unidade = unidade;
		this.usuario = usuario;
		this.senha = senha;
		this.nome = nome;
		this.email = email;
		this.grupo = grupo;
//		this.datahoracadastro = datahoracadastro; 
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "codigo", unique = true, nullable = false)
	public Integer getCodigo() {
		return this.codigo;
	}

	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "unidade", nullable = false)
	public Unidade getUnidade() {
		return this.unidade;
	}

	public void setUnidade(Unidade unidade) {
		this.unidade = unidade;
	}

	@NotEmpty(message="Campo Usuário: Obrigatório")
	@Length(min=3, max=10, message="Campo Usuário: Tamanho mínimo de 3 caracteres")
	@Column(name = "usuario", unique = true, nullable = false, length = 10)
	public String getUsuario() {
		return this.usuario;
	}

	public void setUsuario(String usuario) {
		this.usuario = usuario;
	}

	@NotEmpty(message="Campo Senha: Obrigatório")
	@Length(min=5, max=200, message="Campo Senha: Tamanho mínimo de 5 caracteres")
	@Column(name = "senha", nullable = false, length = 200)
	public String getSenha() {
		return this.senha;
	}

	public void setSenha(String senha) {
		this.senha = senha;
	}

	@NotEmpty(message="Campo Nome: Obrigatório")
	@Length(min=3, max=100, message="Campo Nome: Tamanho mínimo de 3 caracteres")
	@Column(name = "nome", nullable = false, length = 100)
	public String getNome() {
		return this.nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	@Email(message="Campo E-Mail: Inválido")
	@Column(name = "email", length = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "grupo", length = 50)
	public String getGrupo() {
		return this.grupo;
	}

	public void setGrupo(String grupo) {
		this.grupo = grupo;
	}

//	@NotNull(message="Campo Data/Hora: Obrigatório")
//	@Temporal(TemporalType.TIMESTAMP)
//	@Column(name = "datahoracadastro", nullable = false, length = 19)
//	public Date getDatahoracadastro() {
//		return datahoracadastro;
//	}
//
//	public void setDatahoracadastro(Date datahoracadastro) {
//		this.datahoracadastro = datahoracadastro;
//	}
}
